/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as PoliciesImport } from './routes/_policies'
import { Route as IndexImport } from './routes/index'
import { Route as PreviewIdImport } from './routes/preview.$id'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as PoliciesTermsOfServiceImport } from './routes/_policies/terms-of-service'
import { Route as PoliciesPrivacyPolicyImport } from './routes/_policies/privacy-policy'
import { Route as PoliciesCookiePolicyImport } from './routes/_policies/cookie-policy'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const PoliciesRoute = PoliciesImport.update({
  id: '/_policies',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PreviewIdRoute = PreviewIdImport.update({
  id: '/preview/$id',
  path: '/preview/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

const PoliciesTermsOfServiceRoute = PoliciesTermsOfServiceImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => PoliciesRoute,
} as any)

const PoliciesPrivacyPolicyRoute = PoliciesPrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => PoliciesRoute,
} as any)

const PoliciesCookiePolicyRoute = PoliciesCookiePolicyImport.update({
  id: '/cookie-policy',
  path: '/cookie-policy',
  getParentRoute: () => PoliciesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_policies': {
      id: '/_policies'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PoliciesImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/_policies/cookie-policy': {
      id: '/_policies/cookie-policy'
      path: '/cookie-policy'
      fullPath: '/cookie-policy'
      preLoaderRoute: typeof PoliciesCookiePolicyImport
      parentRoute: typeof PoliciesImport
    }
    '/_policies/privacy-policy': {
      id: '/_policies/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PoliciesPrivacyPolicyImport
      parentRoute: typeof PoliciesImport
    }
    '/_policies/terms-of-service': {
      id: '/_policies/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof PoliciesTermsOfServiceImport
      parentRoute: typeof PoliciesImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/preview/$id': {
      id: '/preview/$id'
      path: '/preview/$id'
      fullPath: '/preview/$id'
      preLoaderRoute: typeof PreviewIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PoliciesRouteChildren {
  PoliciesCookiePolicyRoute: typeof PoliciesCookiePolicyRoute
  PoliciesPrivacyPolicyRoute: typeof PoliciesPrivacyPolicyRoute
  PoliciesTermsOfServiceRoute: typeof PoliciesTermsOfServiceRoute
}

const PoliciesRouteChildren: PoliciesRouteChildren = {
  PoliciesCookiePolicyRoute: PoliciesCookiePolicyRoute,
  PoliciesPrivacyPolicyRoute: PoliciesPrivacyPolicyRoute,
  PoliciesTermsOfServiceRoute: PoliciesTermsOfServiceRoute,
}

const PoliciesRouteWithChildren = PoliciesRoute._addFileChildren(
  PoliciesRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/cookie-policy': typeof PoliciesCookiePolicyRoute
  '/privacy-policy': typeof PoliciesPrivacyPolicyRoute
  '/terms-of-service': typeof PoliciesTermsOfServiceRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/preview/$id': typeof PreviewIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/cookie-policy': typeof PoliciesCookiePolicyRoute
  '/privacy-policy': typeof PoliciesPrivacyPolicyRoute
  '/terms-of-service': typeof PoliciesTermsOfServiceRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/preview/$id': typeof PreviewIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_policies': typeof PoliciesRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/_policies/cookie-policy': typeof PoliciesCookiePolicyRoute
  '/_policies/privacy-policy': typeof PoliciesPrivacyPolicyRoute
  '/_policies/terms-of-service': typeof PoliciesTermsOfServiceRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/preview/$id': typeof PreviewIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/sign-in'
    | '/cookie-policy'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/dashboard'
    | '/preview/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/sign-in'
    | '/cookie-policy'
    | '/privacy-policy'
    | '/terms-of-service'
    | '/dashboard'
    | '/preview/$id'
  id:
    | '__root__'
    | '/'
    | '/_policies'
    | '/_protected'
    | '/sign-in'
    | '/_policies/cookie-policy'
    | '/_policies/privacy-policy'
    | '/_policies/terms-of-service'
    | '/_protected/dashboard'
    | '/preview/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PoliciesRoute: typeof PoliciesRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  SignInRoute: typeof SignInRoute
  PreviewIdRoute: typeof PreviewIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PoliciesRoute: PoliciesRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  SignInRoute: SignInRoute,
  PreviewIdRoute: PreviewIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_policies",
        "/_protected",
        "/sign-in",
        "/preview/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_policies": {
      "filePath": "_policies.tsx",
      "children": [
        "/_policies/cookie-policy",
        "/_policies/privacy-policy",
        "/_policies/terms-of-service"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/dashboard"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/_policies/cookie-policy": {
      "filePath": "_policies/cookie-policy.tsx",
      "parent": "/_policies"
    },
    "/_policies/privacy-policy": {
      "filePath": "_policies/privacy-policy.tsx",
      "parent": "/_policies"
    },
    "/_policies/terms-of-service": {
      "filePath": "_policies/terms-of-service.tsx",
      "parent": "/_policies"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/preview/$id": {
      "filePath": "preview.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
